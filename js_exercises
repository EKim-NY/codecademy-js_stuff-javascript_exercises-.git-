// Constant variable in JS. 
// Today's forecast is 293 K. 
const kelvin = 0; 

// Convert Kelvin to Celsius. 
let celsius = kelvin// Convert Celsius to Fahrenheit. 
let fahrenheit = celsius * (9/5) + 32; 

// Round down all decimals to integers. 
fahrenheit = Math.floor(fahrenheit); 

console.log(`Temperature: ${kelvin} Kelvin`); 
console.log(`The temperature is ${fahrenheit} degrees Fahrenheit.`); 

let newton = celsius * (33/100); 
newton = Math.floor(newton); 
console.log(`The temperateure is ${newton} degrees Newton.`); 

// Example of a helper function or a function that returns a value inside another function. 

function monitorCount(rows, columns) {
  return rows * columns;
}

function costOfMonitors(rows, columns) {
  return monitorCount(rows, columns) * 200; 
}

const totalCost = costOfMonitors(5, 4); 

console.log(totalCost); 


// Example of an anonymous function. 
const plantNeedsWater = function (day) {
  if (day === 'Wednesday') {
    return true; 
  } else {
    return false; 
  }
}

plantNeedsWater('Tuesday'); 
console.log(plantNeedsWater('Tuesday'));  

// Example of an arrow function (ie, fat arrow). 
const plantNeedsWater = (day) => {
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};


// Make the arrow function more concise. 
const plantNeedsWater = day => day === 'Wednesday' ? true : false; 

// Function declaration. 
function sumNumbers (num1, num2) {
  const sum = num1 + num2; 
  return sum; 
}

// Anonymous f(x) or a function expression. 
// It is a function declaration without the function name/identifier. 
const total = function (num1, num2) {
  const sum = num1 + num2; 
  return sum; 
} 

// Arrow f(x). 
// It is an anonymous function or a function expression w/o the function keyword and the function identifier. 
const totalThis = (num1, num2) => {
  const sum = num1 + num2; 
  return sum; 
}

// Concise arrow f(x); it fits on a single line. 
// It is an arrow function without the curly braces and has an implied return. The number of arguments determine if they get placed inside () or not. 
const totalThat = (num1, num2) => num1 + num2;  

console.log(sumNumbers(1,1)); 
// console.log(total); 

